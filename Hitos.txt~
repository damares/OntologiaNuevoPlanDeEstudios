CASO: Al intentar marcar un objectProperty (AS_esRequisitoPara) como transitiva y asimétrica a la vez, el razonador (cualquiera) se para y devuelve el error de que una property no puede ser a la vez simple y compuesta.
SOLUCION: Es debido a una restricción del lenguaje OWL2. La propiedad asimétrica es una propiedad simple, mientras que la propiedad transitiva es una propiedad compuesta, debido al cierre transitivo. Por tanto, si una propiedad es asimétrica, es simple, y no puede ser compuesta a la vez, y por tanto transitiva.No es posible imponer restricciones en properties compuestas. Una propiedad es compuesta si cualquiera de sus descendientes son transitivos, si su inversa es transitiva (esto es lo que pasa) o si cualquiera de las descendientes de la propiedad inversa es transitiva.
Por tanto, para mantener la decibilidad, hemos de decidir, en un primer momento, qué resulta más interesante para la ontología: El hecho de que la propiedad sea transitva o sea asimétrica. (transitiva). Más adelante, intentaremos introducir restricciones en las definiciones de objectProperties, de modo que podamos continuar teniendo decibilidad.
ENLACES:
http://protege-ontology-editor-knowledge-acquisition-system.136.n4.nabble.com/Re-Problem-with-properties-td21468.html
http://protege-ontology-editor-knowledge-acquisition-system.136.n4.nabble.com/characteristics-of-properties-td3560139.html#a3560310
http://protege-ontology-editor-knowledge-acquisition-system.136.n4.nabble.com/template/NamlServlet.jtp?macro=search_page&node=136&query=transitive+asymmetric
http://protege-ontology-editor-knowledge-acquisition-system.136.n4.nabble.com/Unfathomable-error-message-td1747948.html
http://www.w3.org/TR/2009/REC-owl2-syntax-20091027/#Global_Restrictions_on_Axioms_in_OWL_2_DL
http://protege-ontology-editor-knowledge-acquisition-system.136.n4.nabble.com/transitive-properties-cannot-be-used-in-number-restrictions-td3496357.html

CASO: Una vez que hacemos que una clase sea Defined Class (con condiciones necesarias y suficientes definidas) podemos empezar a realizar inferencias sobre la ontología. Pero si ponemos dos condiciones conjuntivas (por ejemplo, algo es una actividad formativa si es valida para enseñar una materia y además otorga alguna compentencia especifica) al estar definido el dominio de las condiciones (AF_esValidaParaEnsenar y AF_otorgaCompetenciasEspecificas) aunque sólo compla una de las condiciones, el sistema lo clasifica como actividad formativa (porque dejamos bien claro en la definicion de la object propertie que el dominio es Actividad_Formativa). Para que sea el razonador quien decida si es o no una activdad formativa, hemos de dejar las object properties sin rango, únicamente con dominio, y sin definir funciones inversas (si las definimos, el sistema conoce el dominio de la relación, y vuelve a razonar la clase, aunque no se cumplan las dos condiciones necesarias y suficientes.

CASO: Una vez creada la ontologia abox y la tbox, no podemos utilizar el razonador fact++. Dado que se ha encontrado que HermiT no infiere error si existen condiciones de insatisfacibilidad en las condiciones necesarias y suficinetes para la pertenencia a las clases. De este modo, si tenemos restricciones cardinales de tipo "Es una materia si y solo si Está_Formada_Por min 1 Asignatura" y "Es una asignatura si y solo si Forma_Parte_De max 1 Materia" Fact++ encuentra una insatisfatibilidad y califica Materia como Nothing debido a que las relaciones se han definido como funcionales. Si se elimina la funcionalidad de las relaciones, entonces el razonador ya no encuentra la clase insatisfactible. Debes revisar la ontología desde el principio. Este fallo puede venir dado por la expresividad que cada raznador es capaz de manejar (SROIQ(D) para Pellet - acuérdate de instalarlo y SHOIQ+ para Hermit). 

Guardar errores de desarrollo para luego ponerlos como ejemplos de casos de uso. MUY IMPORTANTE.

- Dar consistencia a la nomenclatura, haciendo definiciones de nuetrs ontologia
- Espresar cardinalidad en las clases, por si fuese de interés. De ese modo poder detectar inconsistencias al definir la cardinalidad de una clase = 1. Además al definir la cardinalidad a 1 y no definir la relacion debe asuminr que el rango de la relación es ese individio
- En las datas properties quizás?
- Diferencias entre clases, individuos, relaciones e instancias de cada uno de llos.
- Acotar el universo de los individuos a los declarados por mi, ¿Se puede hacer?

Deberes:
- Crear ontologia con los individuos, teniendo enc uenta la acotacion
- Crear ontologia con las clases y definiciones,
- Importar en los individuos las clases y relaciones.

CASO: Hemos de tener siempre presente que estamos modelando el mundo real utilizando ontologías OWL. Esto siginifica que resulta imposible, por definición de OWL, imponer restricciones al modelo del tipo: 
	1- "Un individuo debe pertenecer a alguna de las clases definidas": Ssegún OWL, el hecho de que algún individuo no pertenezca a priori a ninguna clase definida no significa que, debido al razonamiento abierto, pueda exister algún axioma que haga cierta esa pertenencia; si definimos una clase NOTHING como el cierre de todas las clases e instanciamos un individuo que no pertenezca a ninguna clase, el razonador lo colocará de modo automático en la clase THING, todo ello salvo que haya hecho mal la definición excluyente de las dos clases. Dicho de otro modo, el hecho de ignorar a que clase pertenece un individuo no implica que no pertenezca a ninguna clase (a alguno pertenecerá, aunque seamos tan igorantes o nuestro modelo esté tan poco refinado que no seamos capaces de clasificarlo en una u otra clase), salvo que por las características del individuo éste pueda (en cuyo caso el sistema no se inclinará por su clasificación en una u otra clase) o deba pertenecer a varias clases, lo que en el caso de que sean disjuntas tendrá como consecuencia la inconsistencia de la ontología.

CASO: Al modelar las actividades formativas dentro de la ontología, vemos que es preciso conservar información acerca del número de créditos que cada actividad formativa debe consumir dentro de la materia, para alcanzar la adquisicion de compentencias definidas en la ficha de cada materia. Por tanto se hace necesario que los individuos "actividades formativas" pasen a ser subgrupos de la clase actividad formativa, y ue exista un individuo diferente para cada actividad formativa y materia. Otra opción mejor a mi juicio consiste en almacenar los créditos de cada actividad formativa dentro del individuo materia como data properties. De este modo, creo que será posible en un futuro realizar la comprobación de que una materia no abarca más créditos que los asignados.
Haciendo esto, acitividades formativos y métodos docentes quedarían al mismo nivel. Sería posible en estos momentos y con este planteamiento valorar la posibilidad de eliminar estas dos clases, ya que a mi juicio no aportan información al modelo. Por contra, al mantenerlas, podemos definir en la propia ontología en qué consiste cada actividad formativa y cada método docente. 

Al final voy a optar por eliminar actividad formativa y método docente de la ontología. Hay que comentarlo con Ángel, y en caso necesario incluirlas. De este modo ganamos control sobre los créditos de cada asignatura, asegurándonos de que no excedemos los créditos asignados, aunque perdamos algo de detalle sobre qué son las actividades formativas y qué son los métodos docentes. Lo que sí podemos hacer es incluir una clase Actividades_Formativas y otra clase Métodos_Docentes y crear individuos de estas clases, que si bien no tendrán relación alguna con otras clases (métodos docentes sí que puede, incluso actividades formativas)... ver con ANGEL

Después de la reunión con ángel, hemos decidido que es necesario almacenar información acerca de cua´ntos crésditos aporta. Vamos a intentar ver si es posible computar productos escalares sobre ontologías, o sumatorios en el peor de los casos, para poder estblecer condiciones de satisfactibilidad dobre el conjunto de la ontología. 
Si pudiésemos definir la ontología en términos sintácticos o semánticos, podríamos decir que la ontología recoge toda la sintaxis del modelo, salvo la semántica que queda fuera de su ámbito. Dado que la cantidad de créditos que componen una materia, o su suma a lo largo del curso estaría dentro del aspecto semántico de la ontología, sería necesario el uso de plugins adicionales (p.ej. mediante la exportación de la ontología a un sgbd para luego poder realizar cómputos sobre el mismo) para poder comprobar la satisfacibilidad del componente semántico de la ontología. Por ello, se ha decidido crear  una actividad formativa para cada una de las materias de modo que las actividades formativas equivalgan al producto escalar de las materias por las actividades formativas, y se almacena en cada elemento de ese conjunto el número de créditos que cada actividad formativa aporta a la materia. La otra opción era crear una úncica object propertie del tipo: AF-Materia y luego hacer un data propertie por cada actividad formativa. Es más elegante, por que realmento el conjunto es de activdades formativas (tipos de actividades formativas) y no de actividades formativas de materias. Es decir, habría que agruparlos por Clases teóricas, seminarios/talleres, estudio y trabajo autónomo, clases prácticas, tutorías, clase de laboratorio, estudio y trabajo en grupo, prácticas y proyectos, y no por todas las actividades formativas de la materia x, de la mteria y...
Además, las actividades formativas que no son válidas para la enseñanza de una materia, aparecerán clasificadas como cosa y no como actividad formativa.La otra opción era clasificar todo como actividad formativa y luego dar 0 créditos a las actividades formativas que no aporten nada a la materia. 

1A opcion: Así, debemos dejar sin especificar la clase de las actividades formativas, y dejarlo a decisión del razonador. Las actividades formativas clasificadas como tales, son actividades formativas. Las actividades formativas que queden clasificadas bajo Thing, no son actividades formativas válidas para esa materia. Se ha optado por eliminar

2A opción: Mejor aún, si forzamos que todas las actividades formativas sean actividades formativas y existe alguna que no cumple las condiciones necesarias y suficientes, el razonador fallará. El problema es que el razonador dice que lo que causa la incosistencia es el axioma de cierre, cuando lo que de verdad ocurre es que las acividades que hemos definido como tales, en realidad no lo son.

CASO: Al repasar las competencias, vemos que existen dos competencias que no son consecuencias del establecimiento de objetivos para el plan de estudios. Las competencias CE-13/18 y la CE-17 no se adquieren para cumplir ningun objetivo. Dicho de otro modo, no hay ningún objetivo general que precise la adquisición de estas competencias para verse satisfecho. Así, cuando estas competencias no tiene relación alguna con ningún otro individuo, el razonador las clasifica bajo la clase THING, pero si hemos establecido alguna relación entre estas competencias y una materia, el razonador la clasifica como competencia general o específica, según al relación que lleve de una a otra. ¿Se debería evitar que una competencia, definida como tal en el documento de ANECA, el razonador la clasificase como competencia si no fuese adquirida para cumplir con algún objetivo? Volvemos a lo hablado anterormente. Al dar de alta los individuos y establecer de que categoría son cada uno, ya no tiene sentido la inferencia porque el razonador lo clasificará en la categoria que digamos, y tan sólo cuando exista una incosistencia el razonador dirá algo. Si la clase que asignamos al individuo no es inconsistente con la clase que el razonador infiere entonces la ontología es válida.  Como regla general, primero vamos a dar de alta la ontología, sin establecer a priori a qué clase pertenece cada individuo. Luego ya se encargará el razonador de discernir si los indiviudos y las clases son consistentes o no.

CASO: En la página 127 dentro de la ficha de la materia optatividad aparece la competencia general 21, pero ésta no se referencia en todo el documento. Se da por hecho que se refiere a la competencia general 1/21

CASO: En la ficha de la materia Trabajo fin de grado, algunas de las competencias generales aparecen desglosadas.

CASO: No cuadran los cre´ditos de las materias con los de las asignaturas que los componen

CASo: Repasar con ñangel el comportamiento del onotgraf

CASO: Algunas asignaturas, al hablar de sus requisitos no queda claro si se trata de la parte 1 o 2 de la asignatura. Por concrección, se toman ambas.

CASO: Falta por modelar las asignaturas optativas(tienen como requisitos TODAS las asignaturas que componen el primer, segundo y para algunas tercer curso) y el TFG con el requisito de haber superado todas las asignaturas.

CASO: Si ponemos las object prperties como disjuntas, los razonadores (todos) causan una excepción. No dan error, si no que el razonador falla por una excepción. No se ha encontrado documentación relativa a esta fallo, pero dado que todas las object properties vana a tener dominios y ranges distintos, el propio razonador inferirá que son distintas.

CASO: Por problemas con los razonadores, no podemos imponer restricciones muy numerosas del tipo CO_seAdquiereParaCumplir_OG min 100 Objetivo_General pues el razonador se hace excesivamente lento. Probado en varias maquinas, la más potente un amd x6.

CASo: No es posible encontrar forma alguna para, de forma automática, poder computar productos escalares o sumatorios

CASO: En la materia física aparece la competencia específica CE-18, pero únicamente figura en la lista de competencias la CE-13/18



